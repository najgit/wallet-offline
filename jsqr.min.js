const video = document.getElementById('video');
const scanQrBtn = document.getElementById('scanQrBtn');

scanQrBtn.addEventListener('click', () => {
  startQrScan();
});

function startQrScan() {
  video.style.display = 'block';

  navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } })
    .then(stream => {
      video.srcObject = stream;
      video.setAttribute("playsinline", true); // required for iOS
      video.play();
      requestAnimationFrame(tick);
    })
    .catch(err => {
      alert('Error accessing camera: ' + err);
    });
}

function tick() {
  if (video.readyState === video.HAVE_ENOUGH_DATA) {
    const canvas = document.createElement('canvas');
    const context = canvas.getContext('2d');
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;
    context.drawImage(video, 0, 0, canvas.width, canvas.height);
    const imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    const code = jsQR(imageData.data, imageData.width, imageData.height, {
      inversionAttempts: "dontInvert",
    });

    if (code) {
      // QR code detected!
      stopQrScan();

      // Put decoded data into first empty share input
      if (!document.getElementById('share1').value) {
        document.getElementById('share1').value = code.data;
      } else if (!document.getElementById('share2').value) {
        document.getElementById('share2').value = code.data;
      } else if (!document.getElementById('share3').value) {
        document.getElementById('share3').value = code.data;
      } else {
        alert('All three share inputs are full.');
      }
    } else {
      requestAnimationFrame(tick);
    }
  } else {
    requestAnimationFrame(tick);
  }
}

function stopQrScan() {
  video.style.display = 'none';
  const stream = video.srcObject;
  if (stream) {
    stream.getTracks().forEach(track => track.stop());
  }
  video.srcObject = null;
}
